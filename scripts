import pyedflib
import numpy as np
from scipy.signal import butter, lfilter
import matplotlib.pyplot as plt

def bandpass_filter(data, lowcut=0.5, highcut=40.0, fs=100, order=5):
    nyquist = 0.5 * fs
    low = lowcut / nyquist
    high = highcut / nyquist
    b, a = butter(order, [low, high], btype='band')
    return lfilter(b, a, data)

# Load and preprocess EDF file
edf = pyedflib.EdfReader("path_to_file.edf")
signal = edf.readSignal(0)  # Channel 0
fs = 100  # Sampling frequency
filtered_signal = bandpass_filter(signal, lowcut=0.5, highcut=40, fs=fs)\

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, LSTM, Dense, Flatten

def create_model(input_shape):
    model = Sequential([
        Conv1D(64, kernel_size=3, activation='relu', input_shape=input_shape),
        MaxPooling1D(pool_size=2),
        LSTM(50, return_sequences=True),
        Flatten(),
        Dense(10, activation='relu'),
        Dense(5, activation='softmax')  # 5 classes (e.g., sleep stages)
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Split data
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Train model
input_shape = (X_train.shape[1], X_train.shape[2])
model = create_model(input_shape)
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

